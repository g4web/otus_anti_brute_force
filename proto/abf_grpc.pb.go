// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: abf.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteForceClient is the client API for AntiBruteForce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceClient interface {
	IsOk(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteLoginStats(ctx context.Context, in *DeleteLoginStatsRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	DeleteIPStats(ctx context.Context, in *DeleteIPStatsRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	AddNetworkToWhiteList(ctx context.Context, in *AddNetworkToWhiteListRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	AddNetworkToBlackList(ctx context.Context, in *AddNetworkToBlackListRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	RemoveNetworkFromWhiteList(ctx context.Context, in *RemoveNetworkFromWhiteListRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	RemoveNetworkFromBlackList(ctx context.Context, in *RemoveNetworkFromBlackListRequest, opts ...grpc.CallOption) (*BaseResponse, error)
}

type antiBruteForceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceClient(cc grpc.ClientConnInterface) AntiBruteForceClient {
	return &antiBruteForceClient{cc}
}

func (c *antiBruteForceClient) IsOk(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/IsOk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) DeleteLoginStats(ctx context.Context, in *DeleteLoginStatsRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/DeleteLoginStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) DeleteIPStats(ctx context.Context, in *DeleteIPStatsRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/DeleteIPStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddNetworkToWhiteList(ctx context.Context, in *AddNetworkToWhiteListRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/AddNetworkToWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddNetworkToBlackList(ctx context.Context, in *AddNetworkToBlackListRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/AddNetworkToBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) RemoveNetworkFromWhiteList(ctx context.Context, in *RemoveNetworkFromWhiteListRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/RemoveNetworkFromWhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) RemoveNetworkFromBlackList(ctx context.Context, in *RemoveNetworkFromBlackListRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/event.AntiBruteForce/RemoveNetworkFromBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServer is the server API for AntiBruteForce service.
// All implementations must embed UnimplementedAntiBruteForceServer
// for forward compatibility
type AntiBruteForceServer interface {
	IsOk(context.Context, *UserRequest) (*UserResponse, error)
	DeleteLoginStats(context.Context, *DeleteLoginStatsRequest) (*BaseResponse, error)
	DeleteIPStats(context.Context, *DeleteIPStatsRequest) (*BaseResponse, error)
	AddNetworkToWhiteList(context.Context, *AddNetworkToWhiteListRequest) (*BaseResponse, error)
	AddNetworkToBlackList(context.Context, *AddNetworkToBlackListRequest) (*BaseResponse, error)
	RemoveNetworkFromWhiteList(context.Context, *RemoveNetworkFromWhiteListRequest) (*BaseResponse, error)
	RemoveNetworkFromBlackList(context.Context, *RemoveNetworkFromBlackListRequest) (*BaseResponse, error)
	mustEmbedUnimplementedAntiBruteForceServer()
}

// UnimplementedAntiBruteForceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServer struct {
}

func (UnimplementedAntiBruteForceServer) IsOk(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOk not implemented")
}
func (UnimplementedAntiBruteForceServer) DeleteLoginStats(context.Context, *DeleteLoginStatsRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginStats not implemented")
}
func (UnimplementedAntiBruteForceServer) DeleteIPStats(context.Context, *DeleteIPStatsRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPStats not implemented")
}
func (UnimplementedAntiBruteForceServer) AddNetworkToWhiteList(context.Context, *AddNetworkToWhiteListRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkToWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServer) AddNetworkToBlackList(context.Context, *AddNetworkToBlackListRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkToBlackList not implemented")
}
func (UnimplementedAntiBruteForceServer) RemoveNetworkFromWhiteList(context.Context, *RemoveNetworkFromWhiteListRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNetworkFromWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServer) RemoveNetworkFromBlackList(context.Context, *RemoveNetworkFromBlackListRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNetworkFromBlackList not implemented")
}
func (UnimplementedAntiBruteForceServer) mustEmbedUnimplementedAntiBruteForceServer() {}

// UnsafeAntiBruteForceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServer interface {
	mustEmbedUnimplementedAntiBruteForceServer()
}

func RegisterAntiBruteForceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServer) {
	s.RegisterService(&AntiBruteForce_ServiceDesc, srv)
}

func _AntiBruteForce_IsOk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).IsOk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/IsOk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).IsOk(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_DeleteLoginStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).DeleteLoginStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/DeleteLoginStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).DeleteLoginStats(ctx, req.(*DeleteLoginStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_DeleteIPStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).DeleteIPStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/DeleteIPStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).DeleteIPStats(ctx, req.(*DeleteIPStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddNetworkToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkToWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddNetworkToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/AddNetworkToWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddNetworkToWhiteList(ctx, req.(*AddNetworkToWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddNetworkToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkToBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddNetworkToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/AddNetworkToBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddNetworkToBlackList(ctx, req.(*AddNetworkToBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_RemoveNetworkFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNetworkFromWhiteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).RemoveNetworkFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/RemoveNetworkFromWhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).RemoveNetworkFromWhiteList(ctx, req.(*RemoveNetworkFromWhiteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_RemoveNetworkFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNetworkFromBlackListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).RemoveNetworkFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.AntiBruteForce/RemoveNetworkFromBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).RemoveNetworkFromBlackList(ctx, req.(*RemoveNetworkFromBlackListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForce_ServiceDesc is the grpc.ServiceDesc for AntiBruteForce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.AntiBruteForce",
	HandlerType: (*AntiBruteForceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsOk",
			Handler:    _AntiBruteForce_IsOk_Handler,
		},
		{
			MethodName: "DeleteLoginStats",
			Handler:    _AntiBruteForce_DeleteLoginStats_Handler,
		},
		{
			MethodName: "DeleteIPStats",
			Handler:    _AntiBruteForce_DeleteIPStats_Handler,
		},
		{
			MethodName: "AddNetworkToWhiteList",
			Handler:    _AntiBruteForce_AddNetworkToWhiteList_Handler,
		},
		{
			MethodName: "AddNetworkToBlackList",
			Handler:    _AntiBruteForce_AddNetworkToBlackList_Handler,
		},
		{
			MethodName: "RemoveNetworkFromWhiteList",
			Handler:    _AntiBruteForce_RemoveNetworkFromWhiteList_Handler,
		},
		{
			MethodName: "RemoveNetworkFromBlackList",
			Handler:    _AntiBruteForce_RemoveNetworkFromBlackList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abf.proto",
}
